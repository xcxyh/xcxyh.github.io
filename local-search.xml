<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MAC 目录不区分大小写问题</title>
    <link href="/2024/06/02/MAC-%E7%9B%AE%E5%BD%95%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E9%97%AE%E9%A2%98/"/>
    <url>/2024/06/02/MAC-%E7%9B%AE%E5%BD%95%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在苹果文件系统 <strong>APFS (Apple File System)</strong>  中，默认情况下是不区分大小写的，这意味着文件和文件夹的名称不区分大小写。例如，”Document.txt” 和 “document.txt” 被视为相同的文件。这种行为适用于大多数用户，并且是 macOS 和 iOS 设备的默认设置。</p><p>最近遇到了一个该特性导致的问题，在往 git 仓库提交文件时，两个人分别创建了两个同名的不区分大小写的文件夹，例如是：”Module” 和 “module”，这两个文件夹都被提交到 git 仓库中了，然后，我本地在拉取代码到 Mac 本地时，这两个文件夹中的内容就被合并了，在不区分大小写的 mac 文件系统中，无法区分出这两个文件夹。</p><p>这种情况导致了一些问题，我们的代码编译是在 linux 上进行的，由于 linux 系统是区分大小写的，所以 在 Module 和 module 中的文件 出现了混乱，导致编译失败。</p><p>解决方案：</p><p>在 mac 上新建一个区分大小写的文件系统分区，打开磁盘工具，创建一个区分大小写的磁盘分区。</p><p><img src="https://raw.githubusercontent.com/xcxyh/xcxyh.github.io/image-save/images/2024Untitled.png" alt="apfs"></p><p>然后拉取源代码到本地，这时，就可以看到有两个不同的 “Module” 和 “module” 目录，然后选择保留其中一个目录，例如，保留 “module” 小写目录，然后移动所有 “Module” 目录中的文件到 “module” 中之后，删除 “Module” 目录，重新提交更改到 git 仓库。</p><p>移动文件的相关指令，到 这两个文件夹的 父目录下，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync -av --remove-source-files Module/ module/<br></code></pre></td></tr></table></figure><p><code>-a</code>：归档模式，递归复制并保持文件属性。</p><p><code>-v</code>：显示详细输出。</p><p><code>--remove-source-files</code>：在同步后删除源目录中的文件。</p><p>这个命令会将源目录中的所有文件移动到目标目录，并在完成后删除源目录中的文件。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 博客中的图片怎么管理？</title>
    <link href="/2024/06/02/Hexo-%E5%8D%9A%E5%AE%A2%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E6%80%8E%E4%B9%88%E7%AE%A1%E7%90%86%EF%BC%9F/"/>
    <url>/2024/06/02/Hexo-%E5%8D%9A%E5%AE%A2%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E6%80%8E%E4%B9%88%E7%AE%A1%E7%90%86%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>一般来讲，我们的博客中会有很多的图片，如果都提交到 Hexo 项目中进行发布的话，会导致我们的 Hexo 静态网站项目非常臃肿，极不推荐使用这种方式来管理博客中的图片。</p><p>如果是我们本地写 Markdown 笔记，图片一般会保存到本地目录，如果是在 Notion or 一些云笔记网站上写，图片会上传到它们的服务器进行保存。</p><p>对于 Hexo 博客，这里推荐使用 图床 的方式来进行管理。</p><p>首先，介绍一下 picgo，<strong>PicGo 是一个用于快速上传图片并获取图片 URL 链接的工具。</strong></p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo is Here | PicGo</a></p><p>PicGo 本体支持如下图床：</p><ul><li><code>七牛图床</code> v1.0</li><li><code>腾讯云 COS v4\v5 版本</code> v1.1 &amp; v1.5.0</li><li><code>又拍云</code> v1.2.0</li><li><code>GitHub</code> v1.5.0</li><li><code>SM.MS V2</code> v2.3.0-beta.0</li><li><code>阿里云 OSS</code> v1.6.0</li><li><code>Imgur</code> v1.6.0</li></ul><p>我们可以结合使用 picgo + github，来管理博客中的图片。</p><p>我们选择直接复用 我们托管 Hexo 博客的 github 仓库，也就是 <a href="http://xcxyh.github.io/">xcxyh.github.io</a> 这个仓库，来新建个 image-save 的分支管理图片。</p><p>在 PicGo 中配置：</p><p><img src="https://raw.githubusercontent.com/xcxyh/xcxyh.github.io/image-save/images/2024202406021902888.png" alt="Untitled"></p><p>其中，git token 的生成方式 可以参考：<a href="https://www.cnblogs.com/leon-2016/p/9284837.html">github 生成 token 的方法 - 南菜园 - 博客园 (cnblogs.com)</a></p><p>设置完成之后，可以测试上传一张图片，在相册中 复制图片的链接，看是否可以访问。</p><p><img src="https://raw.githubusercontent.com/xcxyh/xcxyh.github.io/image-save/images/2024202406021902261.png" alt="Untitled 1"></p><p>结合 Typora 使用：</p><p>当我们成功搭建好图床之后，每次写 Markdown 文档时，都需要先截图，再保存，然后手动打开 Picgo 完成上传，最后将图片地址复制到 Markdown 文档中。</p><p>如何做到更加高效地上传图片到图床呢？</p><p>用 Typora 写笔记，只需要先截图，再粘贴到 Markdown 文档，根据提示直接上传图片，Typora 帮我们自动完成。</p><p>操作为：打开 Typora 的设置，点击图像，按照我给的图片进行设置，替换 PicGo 路径为你当前的安装路径。</p><p><img src="https://raw.githubusercontent.com/xcxyh/xcxyh.github.io/image-save/images/2024202406021902052.png" alt="Untitled 2"></p><p>可以点击验证图片上传，验证是否设置成功~~</p><p>之后，我们便可以愉快地用 Hexo 写图文并茂的博客啦~~~~</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笑一笑就好</title>
    <link href="/2024/05/19/%E7%AC%91%E4%B8%80%E7%AC%91%E5%B0%B1%E5%A5%BD/"/>
    <url>/2024/05/19/%E7%AC%91%E4%B8%80%E7%AC%91%E5%B0%B1%E5%A5%BD/</url>
    
    <content type="html"><![CDATA[<p>随手记录的台词、格言、名言、whatever，笑一笑就好。</p><h2 id="中文篇"><a href="#中文篇" class="headerlink" title="中文篇"></a>中文篇</h2><p>选择你所爱的，爱你所选择的。</p><hr><p>没有谁真正重要。</p><hr><p>如果人在职场不持续学习具体的技能，专业的知识，但又想在职场生存下去，就容易搞别的路子，即是对自己有利，能提升自己地位的事。所以，掌握一门技术，在某一方面成为一名专家，不仅是在增长自己的能力，也是在保全自己的人品。</p><hr><p>睡了两小时午觉，感觉灵魂都被修复了。那是一个温暖的梦。</p><hr><p>拥抱变化。</p><hr><p>谎言不会伤人，真相才是快刀。</p><hr><p>要小心那些一无所有的人。</p><hr><p>愤怒，带来冲动。</p><hr><p>人，只有当带上面具，才能卸下伪装。</p><hr><p>正义无法伸张自己。</p><hr><p>人仿佛永远都是空虚的，用什么都填不满。</p><hr><p>有的时候，不要过度去关注、寻找生活的意义，而是要去关注生活本身，去体验，去做，有些地方，我去过，有些事情，我做过，有些东西，拥有过，其实就够了。生活本身在大多数时候就是无意义的，大多数人的生活也是毫无意义的，对于平庸的我们来讲，生活的体验比意义要重要不是吗。</p><hr><p>你什么都想要，你就什么都得不到。</p><hr><p>以斗争求和平则和平存，以妥协求和平则和平亡。</p><hr><p>积极、主动、不怕拒绝、永远保持激情。</p><hr><p>知道和做到中间有巨大的鸿沟，很多人终生无法逾越。</p><hr><p>自律，不是靠意志力来做到的，而是源于你对未来的期望，你的目标，你内心的渴求。</p><hr><p>深入思考、谨慎决定、坚定执行。</p><hr><p>势利就是只对表面现状的附和，不能超越现在，去想象还未发生的事情。</p><hr><p>要去了解一个人是一个什么样的人，首先想到的要聊的话题的应该是他的童年。</p><hr><p>带着审视的目光去读书，多问为什么。</p><hr><p>对于那些在你生命中出现过的，陪你走过一段路的人，要心怀感激。</p><hr><p>未完待续…</p><h2 id="英文篇"><a href="#英文篇" class="headerlink" title="英文篇"></a>英文篇</h2><p>Living with Pain。</p><hr><p>Fear lasts longer than love.</p><hr><p>Every day like it’s your last.</p><hr><p>Be water my friend.</p><hr><p>Kill the boy and let the man be born.</p><hr><p>Good and great are seldom in the same man.</p><hr><p>Not all problems are worth solving.</p><hr><p>All greatness comes from a brave beginning. — cadillac.</p><hr><p><img src="/../img/movie/dogman.png" alt="dogman"></p><hr><p><img src="/../img/movie/bastard.png" alt="bastarden"></p><hr><p>To be continued…</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 建站-HelloWorld</title>
    <link href="/2024/05/19/hello-world/"/>
    <url>/2024/05/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>为什么需要个人博客？</p><p>平时，作为个人记录，使用类似 Notion 的云笔记就足够了，为什么还需要一个个人博客呢，我认为个人博客有两个作用，一个是博客是展示自己的窗口，是对外的，让别人能够更快的了解你。另一个作用就是作为简历的补充，在找工作时，附上个人网站的链接，无论是 hr 还是 面试官，都可以通过个人博客网站快速了解你，这里的信息要比简历丰富，相比于没有博客网站的人更有优势。</p><p>一句话，它是向他人展示自己的窗口，也是简历的一部分。</p><p>Hexo 是一个快速、简洁且高效的博客框架。主要用于搭建静态博客。支持快速方便的将个人博客网站托管在 GitHub Pages 上，GitHub Pages 是一种静态站点托管服务，每个 GitHub 帐户或组织都可以有一个站点。</p><p>部署方式极其简单，只要简单几步，你就可以拥有一个个人网站。也可以参考官方文档搭建：</p><p><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>首先保证你的电脑上有 node js 和 git 环境。</p><p>这里我推荐 创建两个 git 仓库，一个 git 仓库用来放 hexo 项目和博客 markdown 源文件，一个 git 仓库用于 部署 hexo 静态博客项目。可以将 放 hexo 项目和博客 markdown 源文件的仓库设置为 private 的，将 部署 hexo 的仓库设置为 public 的。</p><p>安装 hexo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">npm install -g hexo<br></code></pre></td></tr></table></figure><p>在想要的路径下新建一个名为 hexo 的文件夹（名字可以随便取），例如我的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">D:\Hexo\hexo-markdown\<br></code></pre></td></tr></table></figure><p>hexo 初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">cd D:\Hexo\hexo-markdown\<br>hexo init<br><span class="hljs-comment">// 注意，先跑 hexo init，这个命令需要在一个空文件夹下运行</span><br>git init<br></code></pre></td></tr></table></figure><p>输入以上命令后，hexo 会自动下载 hexo 项目初始化的文件到当前目录下，其中 _config.yml 为网站的全局配置文件。如何配置这个配置文件，可以看官方文档，或者 config 文件中的注释配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">.<br>├── _config.yml<br>├── <span class="hljs-keyword">package</span>.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br></code></pre></td></tr></table></figure><p>关于主题，直接全网搜 hexo 主题，或者去这里<a href="https://hexo.io/themes/">Themes | Hexo</a>挑一个自己顺眼的就行，将主题 下载到 themes 目录下，更改下 配置文件中的 theme 配置名称就行了。这里我选的是 <a href="https://hexo.fluid-dev.com/">Hexo Theme Fluid (fluid-dev.com)</a> 这个主题，按照教程配置也很简单，这里就不介绍了。</p><h1 id="博客生成、预览"><a href="#博客生成、预览" class="headerlink" title="博客生成、预览"></a>博客生成、预览</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">hexo g # 生成<br>hexo s # 启动服务<br></code></pre></td></tr></table></figure><p>执行以上命令之后，hexo 就会在 public 文件夹生成相关 html 文件，这些就是你博客的静态文件，后续需要把这些提交到 GitHub 上。</p><p>hexo s 是开启本地预览服务，打开浏览器访问  <code>localhost:4000</code>  即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故。</p><p>一些常用的 hexo 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;postName&quot;</span>   <span class="hljs-comment"># 新建文章</span><br>hexo new page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-comment"># 新建页面</span><br>hexo generate <span class="hljs-comment"># 生成静态页面至public目录</span><br>hexo server <span class="hljs-comment"># 开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br>hexo deploy <span class="hljs-comment"># 将.deploy目录部署到GitHub</span><br>hexo <span class="hljs-built_in">help</span>  <span class="hljs-comment"># 查看帮助</span><br>hexo version  <span class="hljs-comment"># 查看Hexo的版本</span><br>hexo deploy -g  <span class="hljs-comment"># 生成加部署</span><br>hexo server -g  <span class="hljs-comment"># 生成加预览</span><br><span class="hljs-comment"># 命令的简写</span><br>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy<br></code></pre></td></tr></table></figure><p>过程中遇到问题，可以先 hexo clean，再重试。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>首先，在 config 文件中 配置 部署方式，这里我们选择部署到 GitHub Pages 上。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&quot;git&quot;</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:xxxxx/xxxxx.github.io.git</span> <span class="hljs-comment"># 写你自己的仓库</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>注意，需要先把 git 推代码的 ssh 配置完成，这样 在 部署时，hexo 会把最新代码推送到 部署仓库。</p><p>部署仓库创建：</p><p>新建一个名为 用户名.github.io  的仓库，比如说，如果你的 GitHub 用户名是 xcxyh，那么你就新建名为  xcxyh.github.io  的仓库，将来你的网站访问地址就是  <a href="https://xcxyh.github.io。仓库名字必须是：username.github.io，其中">https://xcxyh.github.io。仓库名字必须是：username.github.io，其中</a> username 是你的用户名。</p><p>由此可见，每一个 GitHub 账户最多只能创建一个这样可以直接使用域名访问的仓库。</p><p>hexo 部署命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>直接执行 hexo d 的话一般会报如下错误：</p><p><code>Deployer not found: git</code></p><p>这是因为缺少了一个插件，我们可以通过如下命令安装：</p><p><code>npm install hexo-deployer-git --save</code></p><p>然后输入 hexo d 就会将本次有改动的代码全部提交（PS：这里 hexo 选择的方式是强推到 master 分支）。</p><p>github.io  在大陆的加载速度过慢且延迟过高，可以选择将 个人网站部署在 Coding，可以参考：<a href="https://support.qq.com/products/104149/faqs-more/?id=61222">CODING (qq.com)</a></p><p>部署随机域名的个人网页流程：</p><p>新建团队用户，个人为管理。</p><p>新建 DevOps 项目，取名要与自己的团队名相同。</p><p>之后再左侧边栏中找到持续部署菜单栏，选中静态网站进行立即部署。</p><p>然后修改 配置 _config.xml 中相关 deploy 部分即可。</p><h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><p>在 hexo 根目录下执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&#x27;文章名称&#x27;</span><br></code></pre></td></tr></table></figure><p>hexo 会帮我们在 _posts 下生成相关 md 文件，我们只需要打开这个文件就可以开始写博客文章了，用这个命令的好处是帮我们自动生成了文章创建时间。</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
